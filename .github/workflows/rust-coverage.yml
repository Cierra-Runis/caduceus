name: Rust Coverage

on:
  push:
    branches: [main, develop]
    paths:
      - 'server/**'
      - '.github/workflows/rust-coverage.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'server/**'
      - '.github/workflows/rust-coverage.yml'

env:
  CARGO_TERM_COLOR: always

jobs:
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            server/target/
          key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-coverage-
            ${{ runner.os }}-cargo-

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin --locked

      - name: Setup test environment
        working-directory: ./server
        run: |
          # Copy test configuration
          cp config/test.yaml config/config.yaml
          # Create .env file for tests
          echo "DATABASE_URL=mongodb://root:password@localhost:27017/caduceus_test?authSource=admin" > .env
          echo "JWT_SECRET=test_secret_key_for_testing_purposes_only" >> .env
          echo "RUST_LOG=debug" >> .env

      - name: Wait for MongoDB
        run: |
          timeout 30 bash -c 'until mongosh --host localhost:27017 --username root --password password --authenticationDatabase admin --eval "db.adminCommand(\"ping\")" > /dev/null 2>&1; do sleep 1; done'

      - name: Run tests with coverage
        working-directory: ./server
        run: |
          cargo tarpaulin \
            --verbose \
            --all-features \
            --workspace \
            --timeout 120 \
            --out xml \
            --out html \
            --output-dir target/tarpaulin \
            --exclude-files "src/main.rs" \
            --exclude-files "target/*" \
            --exclude-files "tests/*"

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./server/target/tarpaulin/cobertura.xml
          flags: rust
          name: rust-coverage
          fail_ci_if_error: false

      - name: Upload coverage HTML report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./server/target/tarpaulin/tarpaulin-report.html
          retention-days: 30

      - name: Coverage Summary
        working-directory: ./server
        run: |
          if [ -f "target/tarpaulin/cobertura.xml" ]; then
            echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
            echo "Coverage report has been generated successfully." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📊 [View detailed coverage report in artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Coverage report generation failed" >> $GITHUB_STEP_SUMMARY
          fi
